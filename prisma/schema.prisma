generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  email       String    @unique
  password    String
  nivelAcesso String?   @default("")
  isAdmin     Boolean?  @default(false)
  lastLogin   DateTime?
  sessions    Session[]
}

model Session {
  id String @id @default(uuid())

  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

// Módulo de Gestão de Pacientes
model Paciente {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nome                String
  sexo                String
  nif                 String    @unique
  endereco            String
  telefone            String?
  documentoIdentidade String?
  urgencia            String?
  pa                  String?
  ta                  String?
  peso                Float?
  altura              Float?
  idade               Int?
  area                String?   @default("Por indicar")
  estadoTriagem       String?   @default("Em espera")
  dataNascimento      DateTime?
  obs                 String?

  consultas        Consulta[]
  internacoes      Internacao[]
  historicoMedicos HistoricoMedico[]
  prescricoes      Prescricao[]
}

model HistoricoMedico {
  id           Int       @id @default(autoincrement())
  pacienteId   Int?
  paciente     Paciente? @relation(fields: [pacienteId], references: [id])
  descricao    String // Descrição do histórico
  dataRegistro DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Consulta {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  data       DateTime
  medico     String
  tipo       String
  descricao  String
  prescricao String?

  pacienteId Int
  paciente   Paciente  @relation(fields: [pacienteId], references: [id])
  analises   Analise[]
}

model Analise {
  id         Int      @id @default(autoincrement())
  tipo       String // Ex: 'Sangue', 'Urina', etc.
  data       DateTime @default(now())
  resultado  String
  consultaId Int
  consulta   Consulta @relation(fields: [consultaId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Internacao {
  id           Int       @id @default(autoincrement())
  dataAdmissao DateTime
  dataAlta     DateTime?
  motivo       String
  quarto       String
  pacienteId   Int
  paciente     Paciente  @relation(fields: [pacienteId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Módulo de Recursos Humanos
model Funcionario {
  id           Int      @id @default(autoincrement())
  nome         String
  genero       String
  nif          String   @unique
  agente       String?  @unique
  endereco     String
  telefone     String
  dataAdmissao DateTime
  funcao       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ------------------ Farmácias ----------------
model Categoria {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nome         String        @unique
  descricao    String?
  medicamentos Medicamento[]
}

model Fornecedor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nome     String
  nif      String    @unique
  contato  String
  endereco String
  entradas Entrada[]
}

model Medicamento {
  id            Int          @id @default(autoincrement())
  nome          String // Nome do medicamento
  tipo          String // Tipo de medicamento (comprimido, líquido, etc.)
  descricao     String? // Descrição opcional do medicamento
  dataValidade  DateTime // Data de validade
  estoqueAtual  Int?         @default(0) // Quantidade disponível no estoque
  limiteEstoque Int // Limite mínimo para estoque (alerta de reposição)
  dosagem       Int? // Dosagem em mg
  saidas        Saida[] // Relacionamento com saídas
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  prescricoes   Prescricao[]
  categoria     Categoria    @relation(fields: [categoriaId], references: [id])
  categoriaId   Int
  entradas      Entrada[]
}

model Saida {
  id            Int         @id @default(autoincrement())
  medicamentoId Int // Referência ao medicamento
  medicamento   Medicamento @relation(fields: [medicamentoId], references: [id])
  quantidade    Int // Quantidade retirada do estoque
  dataSaida     DateTime    @default(now()) // Data da saída
  motivo        String // Motivo da saída (ex.: Prescrição, descarte, etc.)
  prescricaoId  Int? // Opcionalmente vinculada a uma prescrição
  prescricao    Prescricao? @relation(fields: [prescricaoId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Prescricao {
  id             Int         @id @default(autoincrement())
  pacienteId     Int // Referência ao paciente
  paciente       Paciente    @relation(fields: [pacienteId], references: [id])
  medicamentoId  Int // Referência ao medicamento
  medicamento    Medicamento @relation(fields: [medicamentoId], references: [id])
  instrucoes     String // Instruções de uso
  dosagem        Int // Dosagem prescrita em mg
  frequencia     String // Frequência de uso (ex.: 2x ao dia)
  dataPrescricao DateTime    @default(now())
  saidas         Saida[] // Relacionamento com saídas, se houver
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Entrada {
  id          Int      @id @default(autoincrement())
  quantidade  Int // Quantidade retirada do estoque
  dataEntrada DateTime

  medicamentoId Int // Referência ao medicamento
  medicamento   Medicamento @relation(fields: [medicamentoId], references: [id])
  fornecedorId  Int
  fornecedor    Fornecedor  @relation(fields: [fornecedorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
