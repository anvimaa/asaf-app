generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  email       String    @unique
  password    String
  nivelAcesso String?   @default("")
  isAdmin     Boolean?  @default(false)
  lastLogin   DateTime?
  sessions    Session[]
}

model Session {
  id String @id @default(uuid())

  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

// Módulo de Gestão de Pacientes
model Paciente {
  id                  Int               @id @default(autoincrement())
  nome                String
  dataNascimento      DateTime
  sexo                String
  nif                 String            @unique
  endereco            String
  telefone            String
  documentoIdentidade String?
  area                String?           @default("Triagem")
  urgencia            String?           @default("Normal")
  pa                  String?           @default("Normal")
  ta                  String?           @default("Normal")
  peso                Float?
  altura              Float?
  idade               Int?
  estadoTriagem       String?           @default("Em espera")
  consultas           Consulta[]
  internacoes         Internacao[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  historicoMedicos    HistoricoMedico[]
}

model HistoricoMedico {
  id           Int       @id @default(autoincrement())
  pacienteId   Int?
  paciente     Paciente? @relation(fields: [pacienteId], references: [id])
  descricao    String // Descrição do histórico
  dataRegistro DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Consulta {
  id         Int       @id @default(autoincrement())
  data       DateTime
  medico     String
  descricao  String
  prescricao String?
  pacienteId Int
  paciente   Paciente  @relation(fields: [pacienteId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  analises   Analise[]
}

model Analise {
  id         Int      @id @default(autoincrement())
  tipo       String // Ex: 'Sangue', 'Urina', etc.
  data       DateTime @default(now())
  resultado  String
  consultaId Int
  consulta   Consulta @relation(fields: [consultaId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Internacao {
  id           Int       @id @default(autoincrement())
  dataAdmissao DateTime
  dataAlta     DateTime?
  motivo       String
  quarto       String
  pacienteId   Int
  paciente     Paciente  @relation(fields: [pacienteId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Módulo de Recursos Humanos
model Funcionario {
  id           Int      @id @default(autoincrement())
  nome         String
  genero       String
  nif          String   @unique
  agente       String?  @unique
  endereco     String
  telefone     String
  dataAdmissao DateTime
  funcao       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
