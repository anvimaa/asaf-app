generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  email     String    @unique
  password  String
  isAdmin   Boolean?  @default(false)
  lastLogin DateTime?

  sessions Session[]
}

model Session {
  id String @id @default(uuid())

  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

/// Modelo de Produto
model Product {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  price              Float
  quantityInStock    Int
  reorderLevel       Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  category           Category             @relation(fields: [categoryId], references: [id])
  categoryId         Int
  supplier           Supplier             @relation(fields: [supplierId], references: [id])
  supplierId         Int
  inventory          Inventory?
  orderDetails       OrderDetail[]
  transactionHistory TransactionHistory[]
}

/// Modelo de Categoria
model Category {
  id           Int       @id @default(autoincrement())
  categoryName String    @unique
  description  String?
  products     Product[]
}

/// Modelo de Fornecedor
model Supplier {
  id           Int       @id @default(autoincrement())
  supplierName String
  contactName  String?
  address      String?
  city         String?
  postalCode   String?
  country      String?
  phone        String?
  email        String?   @unique
  products     Product[]
}

/// Modelo de Cliente
model Customer {
  id           Int     @id @default(autoincrement())
  customerName String
  contactName  String?
  address      String?
  city         String?
  postalCode   String?
  country      String?
  phone        String?
  email        String? @unique
  orders       Order[]
}

/// Modelo de Pedido
model Order {
  id           Int           @id @default(autoincrement())
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   Int
  orderDate    DateTime      @default(now())
  shippingDate DateTime?
  status       String?       @default("Pendente")
  totalAmount  Float
  orderDetails OrderDetail[]
  payments     Payment[]
}

/// Modelo de Detalhe do Pedido
model OrderDetail {
  id         Int     @id @default(autoincrement())
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  unitPrice  Float
  discount   Float?
  totalPrice Float
}

/// Modelo de Estoque
model Inventory {
  id              Int      @id @default(autoincrement())
  product         Product  @relation(fields: [productId], references: [id])
  productId       Int      @unique
  quantityInStock Int
  location        String?
  lastUpdated     DateTime @updatedAt
}

/// Modelo de Pagamento
model Payment {
  id            Int      @id @default(autoincrement())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       Int
  paymentDate   DateTime @default(now())
  amountPaid    Float
  paymentMethod String?  @default("Dinheiro")
  paymentStatus String?  @default("Pendente")
}

/// Modelo de Histórico de Transações
model TransactionHistory {
  id              Int      @id @default(autoincrement())
  product         Product  @relation(fields: [productId], references: [id])
  productId       Int
  transactionDate DateTime @default(now())
  transactionType String?  @default("Entrada")
  quantity        Int
  remarks         String?
}
